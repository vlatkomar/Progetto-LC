-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParRuby where
import AbsRuby
import LexRuby
import ErrM

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pListIdent ListIdent
%name pMod Mod
%name pVari Vari
%name pListVari ListVari
%name pStm Stm
%name pListStm ListStm
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr3 Expr3
%name pExpr4 Expr4
%name pExpr5 Expr5
%name pExpr6 Expr6
%name pExpr7 Expr7
%name pExpr8 Expr8
%name pExpr9 Expr9
%name pExpr10 Expr10
%name pExpr11 Expr11
%name pExpr12 Expr12
%name pExpr13 Expr13
%name pExpr Expr
%name pListExpr ListExpr
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '**' { PT _ (TS _ 9) }
  '*=' { PT _ (TS _ 10) }
  '+' { PT _ (TS _ 11) }
  '++' { PT _ (TS _ 12) }
  '+=' { PT _ (TS _ 13) }
  ',' { PT _ (TS _ 14) }
  '-' { PT _ (TS _ 15) }
  '--' { PT _ (TS _ 16) }
  '-=' { PT _ (TS _ 17) }
  '..' { PT _ (TS _ 18) }
  '/' { PT _ (TS _ 19) }
  '/=' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '>' { PT _ (TS _ 25) }
  '>=' { PT _ (TS _ 26) }
  '@' { PT _ (TS _ 27) }
  'Array' { PT _ (TS _ 28) }
  '[' { PT _ (TS _ 29) }
  ']' { PT _ (TS _ 30) }
  'boolean' { PT _ (TS _ 31) }
  'break' { PT _ (TS _ 32) }
  'char' { PT _ (TS _ 33) }
  'continue' { PT _ (TS _ 34) }
  'def' { PT _ (TS _ 35) }
  'do' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'elsif' { PT _ (TS _ 38) }
  'end' { PT _ (TS _ 39) }
  'false' { PT _ (TS _ 40) }
  'for' { PT _ (TS _ 41) }
  'if' { PT _ (TS _ 42) }
  'in' { PT _ (TS _ 43) }
  'int' { PT _ (TS _ 44) }
  'nil' { PT _ (TS _ 45) }
  'range' { PT _ (TS _ 46) }
  'real' { PT _ (TS _ 47) }
  'ref' { PT _ (TS _ 48) }
  'return' { PT _ (TS _ 49) }
  'string' { PT _ (TS _ 50) }
  'then' { PT _ (TS _ 51) }
  'true' { PT _ (TS _ 52) }
  'val' { PT _ (TS _ 53) }
  'valres' { PT _ (TS _ 54) }
  'while' { PT _ (TS _ 55) }
  '{' { PT _ (TS _ 56) }
  '||' { PT _ (TS _ 57) }
  '}' { PT _ (TS _ 58) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }

Program :: { Program }
Program : ListDef { AbsRuby.Prog (reverse $1) }
Def :: { Def }
Def : 'def' Ident '(' ListArg ')' '<' Type '>' ListStm 'end' { AbsRuby.DFun $2 $4 $7 (reverse $9) }
    | '@' Ident '=' Expr { AbsRuby.DVar $2 $4 }
    | Ident '{' ListDef '}' { AbsRuby.DBlock $1 (reverse $3) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Mod Type Ident { AbsRuby.ADec $1 $2 $3 }
    | Mod Type '&' Ident { AbsRuby.ADecP $1 $2 $4 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } | Ident ',' ListIdent { (:) $1 $3 }
Mod :: { Mod }
Mod : {- empty -} { AbsRuby.MDef }
    | 'val' { AbsRuby.MVal }
    | 'valres' { AbsRuby.MValRes }
    | 'ref' { AbsRuby.MRef }
Vari :: { Vari }
Vari : Ident { AbsRuby.VarFor $1 }
     | Ident '=' Expr { AbsRuby.VarAss $1 $3 }
ListVari :: { [Vari] }
ListVari : {- empty -} { [] }
         | Vari ListVari { (:) $1 $2 }
         | {- empty -} { [] }
         | Vari { (:[]) $1 }
         | Vari ',' ListVari { (:) $1 $3 }
Stm :: { Stm }
Stm : Vari { AbsRuby.SVar $1 }
    | '&' Ident '=' Expr { AbsRuby.SVarP $2 $4 }
    | Expr { AbsRuby.SExpr $1 }
    | Ident '{' ListDef '}' { AbsRuby.SBlock $1 (reverse $3) }
    | 'return' ListExpr { AbsRuby.SReturn $2 }
    | 'while' Expr 'do' Stm 'end' { AbsRuby.SWhile $2 $4 }
    | 'for' Vari 'in' Expr 'do' Stm 'end' { AbsRuby.SFor $2 $4 $6 }
    | 'if' Expr 'then' Stm 'end' { AbsRuby.SIf $2 $4 }
    | 'if' Expr 'then' Stm ListStm 'else' Stm 'end' { AbsRuby.SIfElse $2 $4 (reverse $5) $7 }
    | 'elsif' Expr 'then' Stm { AbsRuby.SElsif $2 $4 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Expr1 :: { Expr }
Expr1 : Expr2 '=' Expr1 { AbsRuby.EAss $1 $3 }
      | Expr2 '+=' Expr1 { AbsRuby.EIncAss $1 $3 }
      | Expr2 '-=' Expr1 { AbsRuby.EDecAss $1 $3 }
      | Expr2 '*=' Expr1 { AbsRuby.EMulAss $1 $3 }
      | Expr2 '/=' Expr1 { AbsRuby.EDivAss $1 $3 }
      | Expr2 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 '||' Expr3 { AbsRuby.EOr $1 $3 } | Expr3 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 '&&' Expr4 { AbsRuby.EAnd $1 $3 } | Expr4 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 '==' Expr5 { AbsRuby.EEq $1 $3 }
      | Expr4 '!=' Expr5 { AbsRuby.ENeq $1 $3 }
      | Expr5 { $1 }
Expr5 :: { Expr }
Expr5 : Expr5 '<' Expr6 { AbsRuby.ELt $1 $3 }
      | Expr5 '<=' Expr6 { AbsRuby.ELtEq $1 $3 }
      | Expr5 '>' Expr6 { AbsRuby.EGt $1 $3 }
      | Expr5 '>=' Expr6 { AbsRuby.EGtEq $1 $3 }
      | Expr6 { $1 }
Expr6 :: { Expr }
Expr6 : Expr6 '+' Expr7 { AbsRuby.EAdd $1 $3 }
      | Expr6 '-' Expr7 { AbsRuby.ESub $1 $3 }
      | Expr7 { $1 }
Expr7 :: { Expr }
Expr7 : Expr7 '*' Expr8 { AbsRuby.EMul $1 $3 }
      | Expr7 '/' Expr8 { AbsRuby.EDiv $1 $3 }
      | Expr7 '%' Expr8 { AbsRuby.EMod $1 $3 }
      | Expr8 { $1 }
Expr8 :: { Expr }
Expr8 : Expr8 '**' Expr9 { AbsRuby.EPow $1 $3 } | Expr9 { $1 }
Expr9 :: { Expr }
Expr9 : '!' Expr10 { AbsRuby.ENot $2 } | Expr10 { $1 }
Expr10 :: { Expr }
Expr10 : '++' Expr11 { AbsRuby.EIncPre $2 }
       | '--' Expr11 { AbsRuby.EDecPre $2 }
       | Expr11 '++' { AbsRuby.EIncPost $1 }
       | Expr11 '--' { AbsRuby.EDecPost $1 }
       | '*' Expr11 { AbsRuby.EDeRef $2 }
       | '-' Expr11 { AbsRuby.ENeg $2 }
       | Expr11 { $1 }
Expr11 :: { Expr }
Expr11 : Ident '(' ListExpr ')' { AbsRuby.ECall $1 $3 }
       | Expr12 { $1 }
Expr12 :: { Expr }
Expr12 : Integer '..' Integer { AbsRuby.ERange $1 $3 }
       | String { AbsRuby.EStr $1 }
       | Integer { AbsRuby.EInt $1 }
       | Double { AbsRuby.EReal $1 }
       | Char { AbsRuby.EChar $1 }
       | Ident '=' '[' ListExpr ']' { AbsRuby.EArray $1 $4 }
       | 'true' { AbsRuby.ETrue }
       | 'false' { AbsRuby.EFalse }
       | Expr13 { $1 }
Expr13 :: { Expr }
Expr13 : 'break' { AbsRuby.EBreak }
       | 'continue' { AbsRuby.ECont }
       | Ident { AbsRuby.EId $1 }
       | '(' Expr ')' { $2 }
Expr :: { Expr }
Expr : Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
Type :: { Type }
Type : 'int' { AbsRuby.TInt }
     | 'real' { AbsRuby.TReal }
     | 'boolean' { AbsRuby.TBool }
     | 'char' { AbsRuby.TChar }
     | 'string' { AbsRuby.TString }
     | 'Array' { AbsRuby.TArray }
     | 'nil' { AbsRuby.TNil }
     | 'range' { AbsRuby.TRange }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

