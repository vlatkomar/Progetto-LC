module SkelRuby where

-- Haskell module generated by the BNF converter

import AbsRuby
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun ident args type_ stms -> failure x
  DVar ident expr -> failure x
  DBlock ident defs -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADec mod type_ ident -> failure x
  ADecP mod type_ ident -> failure x
transMod :: Mod -> Result
transMod x = case x of
  MDef -> failure x
  MVal -> failure x
  MValRes -> failure x
  MRef -> failure x
transVari :: Vari -> Result
transVari x = case x of
  VarFor ident -> failure x
  VarAss ident expr -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SVar vari -> failure x
  SVarP ident expr -> failure x
  SExpr expr -> failure x
  SBlock ident defs -> failure x
  SReturn exprs -> failure x
  SWhile expr stm -> failure x
  SFor vari expr stm -> failure x
  SIf expr stm -> failure x
  SIfElse expr stm1 stms stm2 -> failure x
  SElsif expr stm -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EAss expr1 expr2 -> failure x
  EIncAss expr1 expr2 -> failure x
  EDecAss expr1 expr2 -> failure x
  EMulAss expr1 expr2 -> failure x
  EDivAss expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EEq expr1 expr2 -> failure x
  ENeq expr1 expr2 -> failure x
  ELt expr1 expr2 -> failure x
  ELtEq expr1 expr2 -> failure x
  EGt expr1 expr2 -> failure x
  EGtEq expr1 expr2 -> failure x
  EAdd expr1 expr2 -> failure x
  ESub expr1 expr2 -> failure x
  EMul expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EMod expr1 expr2 -> failure x
  EPow expr1 expr2 -> failure x
  ENot expr -> failure x
  EIncPre expr -> failure x
  EDecPre expr -> failure x
  EIncPost expr -> failure x
  EDecPost expr -> failure x
  EDeRef expr -> failure x
  ENeg expr -> failure x
  ECall ident exprs -> failure x
  ERange integer1 integer2 -> failure x
  EStr string -> failure x
  EInt integer -> failure x
  EReal double -> failure x
  EChar char -> failure x
  EArray ident exprs -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EBreak -> failure x
  ECont -> failure x
  EId ident -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TReal -> failure x
  TBool -> failure x
  TChar -> failure x
  TString -> failure x
  TArray -> failure x
  TNil -> failure x
  TRange -> failure x

