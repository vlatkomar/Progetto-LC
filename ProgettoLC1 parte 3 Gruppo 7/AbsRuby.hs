

module AbsRuby where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Ident [Arg] Type [Stm]
    | DVar Ident Expr
    | DBlock Ident [Def]
  deriving (Eq, Ord, Show, Read)

data Arg = ADec Mod Type Ident | ADecP Mod Type Ident
  deriving (Eq, Ord, Show, Read)

data Mod = MDef | MVal | MValRes | MRef
  deriving (Eq, Ord, Show, Read)

data Vari = VarFor Ident | VarAss Ident Expr
  deriving (Eq, Ord, Show, Read)

data Stm
    = SVar Vari
    | SVarP Ident Expr
    | SExpr Expr
    | SBlock Ident [Def]
    | SReturn [Expr]
    | SWhile Expr Stm
    | SFor Vari Expr Stm
    | SIf Expr Stm
    | SIfElse Expr Stm [Stm] Stm
    | SElsif Expr Stm
  deriving (Eq, Ord, Show, Read)

data Expr
    = EAss Expr Expr
    | EIncAss Expr Expr
    | EDecAss Expr Expr
    | EMulAss Expr Expr
    | EDivAss Expr Expr
    | EOr Expr Expr
    | EAnd Expr Expr
    | EEq Expr Expr
    | ENeq Expr Expr
    | ELt Expr Expr
    | ELtEq Expr Expr
    | EGt Expr Expr
    | EGtEq Expr Expr
    | EAdd Expr Expr
    | ESub Expr Expr
    | EMul Expr Expr
    | EDiv Expr Expr
    | EMod Expr Expr
    | EPow Expr Expr
    | ENot Expr
    | EIncPre Expr
    | EDecPre Expr
    | EIncPost Expr
    | EDecPost Expr
    | EDeRef Expr
    | ENeg Expr
    | ECall Ident [Expr]
    | ERange Integer Integer
    | EStr String
    | EInt Integer
    | EReal Double
    | EChar Char
    | EArray Ident [Expr]
    | ETrue
    | EFalse
    | EBreak
    | ECont
    | EId Ident
  deriving (Eq, Ord, Show, Read)

data Type
    = TInt | TReal | TBool | TChar | TString | TArray | TNil | TRange
  deriving (Eq, Ord, Show, Read)

