{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrettyPrinter where

-- pretty-printer generated by the BNF converter

import AbsRuby
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    t:"=[":r:"]" :ts -> new (i-1) . showString t . showString "=[" . showString r . showString "]" . new(i-1) . rend (i-1) ts
    "@":t:"=":r  :ts -> new (i-1) . showChar '@' . showString t . showString "=" . showString r . new (i-1) . rend (i-1) ts
    t:"(":y:")" :ts -> showString t . showString "(" . showString y . showString ") " . new(i-1) . rend (i-1) ts
    "else"  :ts -> new (i-1) . showString "else " .  rend (i-1) ts
    "then"  :ts -> new (i-1) . showString "then " .  rend (i-1) ts 
    "return" :ts -> new (i-1) . showString "return " .  rend (i-1) ts 
    "elsif"  :ts -> new (i-1) . showString "elsif " .  rend (i-1) ts 
    "for"    :ts -> new (i-1) . showString "for " .  rend (i-1) ts 
    "while"  :ts -> new (i-1) . showString "while " .  rend (i-1) ts 
    "end"    :ts -> new (i-1) . showString  "end" . new (i-1) . rend (i-1) ts
    "do"     :ts -> showString  "do" . new (i-1) . rend (i-1) ts
    ">"      :ts -> showChar '>' . new (i-1) . rend (i-1) ts
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Program where
  prt i e = case e of
    Prog defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Def where
  prt i e = case e of
    DFun id args type_ stms -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "<"), prt 0 type_, doc (showString ">"), prt 0 stms, doc (showString "end")])
    DVar id expr -> prPrec i 0 (concatD [doc (showString "@"), prt 0 id, doc (showString "="), prt 0 expr])
    DBlock id defs -> prPrec i 0 (concatD [prt 0 id, doc (showString "{"), prt 0 defs, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Arg where
  prt i e = case e of
    ADec mod type_ id -> prPrec i 0 (concatD [prt 0 mod, prt 0 type_, prt 0 id])
    ADecP mod type_ id -> prPrec i 0 (concatD [prt 0 mod, prt 0 type_, doc (showString "&"), prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Mod where
  prt i e = case e of
    MDef -> prPrec i 0 (concatD [])
    MVal -> prPrec i 0 (concatD [doc (showString "val")])
    MValRes -> prPrec i 0 (concatD [doc (showString "valres")])
    MRef -> prPrec i 0 (concatD [doc (showString "ref")])

instance Print Vari where
  prt i e = case e of
    VarFor id -> prPrec i 0 (concatD [prt 0 id])
    VarAss id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Stm where
  prt i e = case e of
    SVar vari -> prPrec i 0 (concatD [prt 0 vari])
    SVarP id expr -> prPrec i 0 (concatD [doc (showString "&"), prt 0 id, doc (showString "="), prt 0 expr])
    SExpr expr -> prPrec i 0 (concatD [prt 0 expr])
    SBlock id defs -> prPrec i 0 (concatD [prt 0 id, doc (showString "{"), prt 0 defs, doc (showString "}")])
    SReturn exprs -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exprs])
    SWhile expr stm -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, doc (showString "do"), prt 0 stm, doc (showString "end")])
    SFor vari expr stm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 vari, doc (showString "in"), prt 0 expr, doc (showString "do"), prt 0 stm, doc (showString "end")])
    SIf expr stm -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, doc (showString "then"), prt 0 stm, doc (showString "end")])
    SIfElse expr stm1 stms stm2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, doc (showString "then"), prt 0 stm1, prt 0 stms, doc (showString "else"), prt 0 stm2, doc (showString "end")])
    SElsif expr stm -> prPrec i 0 (concatD [doc (showString "elsif"), prt 0 expr, doc (showString "then"), prt 0 stm])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Expr where
  prt i e = case e of
    EAss expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "="), prt 1 expr2])
    EIncAss expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "+="), prt 1 expr2])
    EDecAss expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "-="), prt 1 expr2])
    EMulAss expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "*="), prt 1 expr2])
    EDivAss expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "/="), prt 1 expr2])
    EOr expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "||"), prt 3 expr2])
    EAnd expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "&&"), prt 4 expr2])
    EEq expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "=="), prt 5 expr2])
    ENeq expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "!="), prt 5 expr2])
    ELt expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "<"), prt 6 expr2])
    ELtEq expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "<="), prt 6 expr2])
    EGt expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString ">"), prt 6 expr2])
    EGtEq expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString ">="), prt 6 expr2])
    EAdd expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "+"), prt 7 expr2])
    ESub expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "-"), prt 7 expr2])
    EMul expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "*"), prt 8 expr2])
    EDiv expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "/"), prt 8 expr2])
    EMod expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "%"), prt 8 expr2])
    EPow expr1 expr2 -> prPrec i 8 (concatD [prt 8 expr1, doc (showString "**"), prt 9 expr2])
    ENot expr -> prPrec i 9 (concatD [doc (showString "!"), prt 10 expr])
    EIncPre expr -> prPrec i 10 (concatD [doc (showString "++"), prt 11 expr])
    EDecPre expr -> prPrec i 10 (concatD [doc (showString "--"), prt 11 expr])
    EIncPost expr -> prPrec i 10 (concatD [prt 11 expr, doc (showString "++")])
    EDecPost expr -> prPrec i 10 (concatD [prt 11 expr, doc (showString "--")])
    EDeRef expr -> prPrec i 10 (concatD [doc (showString "*"), prt 11 expr])
    ENeg expr -> prPrec i 10 (concatD [doc (showString "-"), prt 11 expr])
    ECall id exprs -> prPrec i 11 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    ERange n1 n2 -> prPrec i 12 (concatD [prt 0 n1, doc (showString ".."), prt 0 n2])
    EStr str -> prPrec i 12 (concatD [prt 0 str])
    EInt n -> prPrec i 12 (concatD [prt 0 n])
    EReal d -> prPrec i 12 (concatD [prt 0 d])
    EChar c -> prPrec i 12 (concatD [prt 0 c])
    EArray id exprs -> prPrec i 12 (concatD [prt 0 id, doc (showString "="), doc (showString "["), prt 0 exprs, doc (showString "]")])
    ETrue -> prPrec i 12 (concatD [doc (showString "true")])
    EFalse -> prPrec i 12 (concatD [doc (showString "false")])
    EBreak -> prPrec i 13 (concatD [doc (showString "break")])
    ECont -> prPrec i 13 (concatD [doc (showString "continue")])
    EId id -> prPrec i 13 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TReal -> prPrec i 0 (concatD [doc (showString "real")])
    TBool -> prPrec i 0 (concatD [doc (showString "boolean")])
    TChar -> prPrec i 0 (concatD [doc (showString "char")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])
    TArray -> prPrec i 0 (concatD [doc (showString "Array")])
    TNil -> prPrec i 0 (concatD [doc (showString "nil")])
    TRange -> prPrec i 0 (concatD [doc (showString "range")])


